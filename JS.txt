(function() {
    console.log(1); 
    setTimeout(function(){console.log(2)}, 1000); 
    setTimeout(function(){console.log(3)}, 0); 
    console.log(4);
})();

let foo = 10;
(function(){
    console.log(foo)
    let foo = 100
})();

for (let i = 0; i < 5; i++) {
  setTimeout(function() { console.log(i); }, i * 1000 );
}

const module = {
  x: 42,
  y:"A",
  getX: function () {
    return (this.x + this.y);
  },
};

const module2 = {
  x: 22,
  y:"B",
  getX: function () {
    return (this.x + this.y);
  },
};


const unboundGetX = module.getX;
console.log(unboundGetX()); 

const boundGetX = unboundGetX.bind(module2);
console.log(boundGetX()); 

this keyword
call apply and bind
 function greet(greeting, name) {
    console.log(`${greeting}, ${name}! My name is ${this.myName}.`);
  }

const person = { myName: 'Ajay' };

greet.call(person, 'Hello', 'John');     // Hello, John! My name is Ajay.
greet.apply(person, ['Hi', 'Jane']);     // Hi, Jane! My name is Ajay.

const boundGreet = greet.bind(person, 'Hey');
boundGreet('Alex');                      // Hey, Alex! My name is Ajay.

call() – Calls function immediately with given this and arguments.

apply() – Like call(), but arguments are passed as an array.

bind() – Doesn't call immediately, returns a new function with this bound.

calculator.add(3).substract(5).multiply(6).getResult()
diff b/w deep copy and shallow copy
 let original = { a: 1, b: { c: 2 } };

 let shallow = { ...original };
 shallow.b.c = 42;
 console.log(original.b.c); // 42 (affected)

 let deep = JSON.parse(JSON.stringify(original));
 deep.b.c = 100;
 console.log(original.b.c); // 42 (not affected)

 In Shallow copy shared the Referenced and affected original 
 while In Deep Copy Doesn’t affect the original and doesn't shared the Referenced

currying
 - Currying is a functional programming technique where a function with multiple arguments is 
   transformed into a sequence of functions, 
   each taking a single argument.
   function add(a) {
     return function(b) {
       return a + b;
     };
   }

   console.log(add(2)(3)); // 5

closures
  closure is the combination of lexical scope and local scope of inner function.
  Lexical Scope defines that inner functions can access the scope of parent functions even if they has returned.

 function foo(a){
  let x = a + 10;
   return function(){
    return 5 + x;
  }
}

let t = foo(6);
let total = t()
console.log(total)

debouncing and throttling
  Debouncing and throttling are two important techniques in JavaScript 
  used to limit function execution
  Debounce delays function execution until a pause in events, 
  while throttle limits function execution to once per fixed interval

event loop
Microtask Queue 
 - Microtask Queue is like the Callback Queue, but Microtask Queue has higher priority. 
   All the callback functions coming through Promises and Mutation Observer will go inside the Microtask Queue.

diff b/w normal function and arrow function
 - 	Normal Hoisted (can be used before declaration)
    Arrow Not hoisted (must be defined before use)
    this binding Normal Has its own this but Arrow Doesn’t have
    Normal Constructor Can be used with new (constructors) Arrow Cannot be used as a constructor

const person = {
  name: "Alice",
  sayHello: function () {
    console.log("Normal:", this.name); // 'this' refers to person
  },
  sayHelloArrow: () => {
    console.log("Arrow:", this.name); // 'this' refers to the outer scope, not person
  }
};

person.sayHello();       // Normal: Alice
person.sayHelloArrow();  // Arrow: undefined (or window.name if in browser)



